#!/usr/bin/env node 

/*
  (c) 2013-2014 musictheory.net, LLC
  MIT license, http://www.opensource.org/licenses/mit-license.php
*/

var fs       = require("fs");
var util     = require("util");
var esprima  = require("esprima-oj");
var getopt   = require("node-getopt");
var ojc      = require("../src/ojc");


var opt = getopt.create([
    [ "o", "output=FILE",               "output .js file"],
    [ "",  "input-state=FILE",          "input file for compiler state" ],
    [ "",  "output-state=FILE",         "output file for compiler state" ],
    [ "",  "cache=FILE",                "cache file to speed up builds" ],
    [ "",  "prepend=FILE+",             "prepend file to output (without compiling or hinting)"],
    [ "",  "append=FILE+",              "append file to output (without compiling or hinting)"],
    [ "s", "squeeze",                   "enable squeezer" ],
    [ "",  "squeeze-start-index",       "start index for squeezer" ],
    [ "",  "squeeze-end-index",         "end index for squeezer" ],

    [ "",  "output-language=LANG",      "output language" ],

    [ "",  "inline-const",              "inline @const identifiers" ],
    [ "",  "inline-enum",               "inline @enum identifiers"  ],

    [ "",  "jshint",                    "enable jshint integration" ],
    [ "",  "jshint-config=FILE",        "config file for jshint" ],
    [ "",  "jshint-ignore=CODE+",       "ignore warning from jshint" ],

    [ "",  "check-ivars",               "warn about potentially undefined ivars"   ],
    [ "",  "check-this",                "warn about usage of 'this' in oj methods" ],
    [ "",  "check-selectors",           "warn about usage of undeclared selectors" ],
    [ "",  "check-types",               "use experimental type checker"            ],

    [ "",  "debug-message-send",        "use debug version of oj.msgSend" ],
    [ "",  "dump-ast",                  "(for development)" ],
    [ "",  "dump-time",                 "(for development)" ],

    [ "h", "help",                      "display this help" ],
    [ "v", "version",                   "show version"      ]
]);


opt.setHelp(
    "Usage: ojc [OPTIONS] INPUT_FILES\n" +
    "\n" +
    "[[OPTIONS]]\n" +
    "\n" +
    "Installation: npm install ojc\n" +
    "Respository:  https://github.com/musictheory/oj"
);

opt.bindHelp();
opt.parseSystem();

var inputFiles = opt.parsedOption.argv;
var options    = opt.parsedOption.options;


// Bail if no input files
if (!inputFiles || inputFiles.length == 0) {
    console.error("ojc: error: no input files");
    process.exit(1);
}


// Read each input file and store in inContent
var inputContents = [ ];
inputFiles.forEach(function(f) {
    try {
        inputContents.push(fs.readFileSync(f).toString());
    } catch (e) {
        console.error("ojc: error: " + e);
        process.exit(1);
    }
});

// Read each prepend file and store in inputPrependContents
var prependFiles = opt.parsedOption.prepend || [ ];
var prependContents = [ ];
prependFiles.forEach(function(f) {
    try {
        prependContents.push(fs.readFileSync(f).toString());
    } catch (e) {
        console.error("ojc: error: " + e);
        process.exit(1);
    }
});

// Read each append file and store in appendContents
var appendFiles = opt.parsedOption.append || [ ];
var appendContents = [ ];
appendFiles.forEach(function(f) {
    try {
        appendContents.push(fs.readFileSync(f).toString());
    } catch (e) {
        console.error("ojc: error: " + e);
        process.exit(1);
    }
});


options["files"]    = inputFiles;
options["contents"] = inputContents;

if (prependContents.length) {
    options["prepend"]  = prependContents.join("\n");
}

if (appendContents.length) {
    options["append"] = appendContents.join("\n");
}

var inputStateFile  = options["input-state"];

var outputFile      = options["output"];
var outputStateFile = options["output-state"];
var outputMapFile   = options["output-map"];

delete(options["input-state"]);
delete(options["output-state"]);
delete(options["output"]);


// Read inputStateFile and save contents into options.state
if (inputStateFile) {
    try {
        options["state"] = JSON.parse(fs.readFileSync(inputStateFile));
    } catch (e) {
        console.error("ojc: error: " + e);
        process.exit(1);
    }
}

var cacheFile = options["cache"];
var cacheContents;
if (cacheFile) {
    try {
        cacheContents = JSON.parse(fs.readFileSync(cacheFile));
    } catch (e) { };

    if (!cacheContents) cacheContents = { };
    options["cache"] = cacheContents;
}


try {
    ojc.ojc(options, function(err, result) {
        if (outputFile) {
            fs.writeFileSync(outputFile, result.code, "utf8")
        } else {
            if (err) {
                console.error(err);
            } else if (result.code) {
                if (options["dump-ast"]) {
                    process.stdout.write(result.ast);
                } else {
                    process.stdout.write(result.code);
                }
            }
        }

        if (outputStateFile) {
            fs.writeFileSync(outputStateFile, JSON.stringify(result.state || { }, null, "    "), "utf8")
        }

        if (outputMapFile) {
            fs.writeFileSync(outputMapFile, JSON.stringify(result.map || { }, null, "    "), "utf8")
        }

        if (cacheFile) {
            fs.writeFileSync(cacheFile, JSON.stringify(result.cache || { }, null, "    "), "utf8")
        }

        process.exit(err ? 1 : 0);
    });


} catch (e) {
    if (inputFiles.length == 1) {
        console.log(inputFiles[0] + ":" + e.lineNumber + " " + e.description);
    } else {
        console.log(e.description);
    }

    if (!e.errorType) console.log(e.stack);
    process.exit(2);
}
