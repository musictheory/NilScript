#!/usr/bin/env node 

/*
  (c) 2013-2014 musictheory.net, LLC
  MIT license, http://www.opensource.org/licenses/mit-license.php
*/

var fs       = require("fs");
var util     = require("util");
var getopt   = require("node-getopt");
var _        = require("lodash");

var ojc      = require("../src/compiler");


var opt = getopt.create([
    [ "o", "output=FILE",               "output .js file"],
    [ "",  "input-state=FILE",          "input file for compiler state" ],
    [ "",  "output-state=FILE",         "output file for compiler state" ],
    [ "",  "cache=FILE",                "cache file to speed up builds" ],
    [ "",  "prepend=FILE+",             "prepend file to output (without compiling or hinting)"],
    [ "",  "append=FILE+",              "append file to output (without compiling or hinting)"],
    [ "",  "source-map-file=FILE",      "output source map file" ],
    [ "",  "source-map-root=URL",       "URL to use for 'sourceRoot' in source map" ],    
    [ "s", "squeeze",                   "enable squeezer" ],
    [ "",  "squeeze-start-index",       "start index for squeezer" ],
    [ "",  "squeeze-end-index",         "end index for squeezer" ],

    [ "",  "output-language=LANG",      "output language" ],

    [ "",  "inline-const",              "inline @const identifiers" ],
    [ "",  "inline-enum",               "inline @enum identifiers"  ],

    [ "",  "jshint",                    "enable jshint integration" ],
    [ "",  "jshint-config=FILE",        "config file for jshint" ],
    [ "",  "jshint-ignore=CODE+",       "ignore warning from jshint" ],

    [ "",  "check-types",               "use type checker (experimental)" ],
    [ "",  "no-implicit-any",           "type checker: disallow implicit any"              ],
    [ "",  "strict-functions",          "type checker: enforce TypeScript-style functions" ],
    [ "",  "strict-object-literals",    "type checker: enforce TypeScript object literals" ],

    [ "",  "warn-this-in-methods",      "warn about usage of 'this' in oj methods" ],
    [ "",  "warn-unknown-selectors",    "warn about usage of unknown selectors"    ],
    [ "",  "warn-unknown-ivars",        "warn about unknown ivars"                 ],
    [ "",  "warn-unused-ivars",         "warn about unused ivars"                  ],

    [ "",  "debug-message-send",        "use debug version of oj.msgSend" ],
    [ "",  "dump-ast",                  "(for development)" ],
    [ "",  "dump-time",                 "(for development)" ],
    [ "",  "dump-types",                "(for development)" ],
    [ "",  "dump-profile",              "(for development)" ],

    [ "h", "help",                      "display this help" ],
    [ "v", "version",                   "show version"      ]
]);


opt.setHelp(
    "Usage: ojc [OPTIONS] INPUT_FILES\n" +
    "\n" +
    "[[OPTIONS]]\n" +
    "\n" +
    "Installation: npm install ojc\n" +
    "Respository:  https://github.com/musictheory/oj"
);

opt.bindHelp();
opt.parseSystem();

var argv    = opt.parsedOption.argv;
var options = opt.parsedOption.options;


function print_error(err)
{
    function toString(e) {
        var result  = "";

        var file   = e.file   || e.filename;
        var line   = e.line   || e.lineNumber;
        var column = e.column || e.columnNumber || e.col;
        var reason = e.reason || e.description;

        if (file)   result += file;
        if (line)   result += ":" + line;
        if (column) result += ":" + column;
        if (reason) result += " " + reason;

        return result;
    }

    var strings;
    if (_.isArray(err)) {
        err = _.flatten(err);
        strings = _.map(err, function(e) { return toString(e) });
    } else {
        strings = [ toString(err) ];
    }

    console.error(_.uniq(strings).sort().join("\n"));        
}


function read_files(files)
{
    if (!files) return [ ];

    if (!_.isArray(files)) {
        files = [ files ];
    }

    var results = [ ];
    _.each(files, function(file) {
        try {
            var contents = (fs.readFileSync(file).toString());
            results.push({ path: file, contents: contents });
        } catch (e) {
            console.error("ojc: error reading file: " + e);
            process.exit(1);
        }
    });

    return results;
}


function read_contents(files)
{
    if (!files) return null;

    var pairs = read_files(files);

    if (!pairs || !pairs.length) {
        return null;
    }

    return _.map(pairs, function(pair) {
        return pair.contents;
    }).join("\n");
}


// Bail if no input files (specified after options)
if (!argv || argv.length == 0) {
    console.error("ojc: error: no input files");
    process.exit(1);
}


// Extract these options and delete
var inputStateFile  = options["input-state"];     delete(options["input-state"]);
var outputFile      = options["output"];          delete(options["output"]);
var outputStateFile = options["output-state"];    delete(options["output-state"]);

// Extract these options, don't delete (used by compiler)
var outputSourceMapFile = options["source-map-file"];
var dumpTypes           = options["dump-types"];
var dumpAST             = options["dump-ast"];
var dumpProfile         = options["dump-profile"];

// Convert filenames in options to file contents
options["files"]         = read_files(argv);
options["prepend"]       = read_contents( options["prepend"] );
options["append"]        = read_contents( options["append"]  );
options["state"]         = read_contents( inputStateFile     );

// "cache" is both an input and an output file.  It may not already exist.
var cacheFile = options["cache"];
(function() {
    if (!cacheFile) return;

    var contents;

    try {
        contents = JSON.parse(fs.readFileSync(cacheFile));
    } catch (e) { };

    if (!contents) contents = { };
    options["cache"] = contents;
}());

// Read and parse JSHint config
(function() {
    var contents = read_contents(options["jshint-config"]);
    options["jshint-config"] = contents ? JSON.parse(contents) : null;
}());


try {
    var profiler;
    if (dumpProfile) {
        profiler = require("../src/profiler");
        profiler.startProfiling("ojc");
    }

    ojc.compile(options, function(err, result) {
        if (err) {
            print_error(err);
            process.exit(1);
        }

        _.each(result.warnings, function(warning) {
            print_error(warning);
        });

        if (profiler) {
            var cpuProfile = profiler.stopProfiling("ojc");
            fs.writeFileSync("/tmp/ojc.cpuprofile", JSON.stringify(cpuProfile));
        }

        if (dumpAST) {
            if (result.dumpedAST) fs.writeFileSync("/tmp/ojc.ast", result.dumpedAST);
        }

        if (outputFile) {
            fs.writeFileSync(outputFile, result.code, "utf8")
        } else {
            if (err) {
                print_error(err);
            } else if (result.code) {
                process.stdout.write(result.code);
            }
        }

        if (outputStateFile) {
            fs.writeFileSync(outputStateFile, JSON.stringify(result.state || { }, null, "    "), "utf8");
        }

        if (outputSourceMapFile) {
            fs.writeFileSync(outputSourceMapFile, result.map, "utf8");
        }

        if (cacheFile) {
            fs.writeFileSync(cacheFile, JSON.stringify(result.cache || { }, null, "    "), "utf8");
        }

        process.exit(err ? 1 : 0);
    });


} catch (e) {
    print_error(e);
    process.exit(2);
}
