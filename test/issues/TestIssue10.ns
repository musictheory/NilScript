
@class Mooer
@property wrapped: id;
- (id) moo { return _wrapped; }
@end


@class Barker
@property wrapped: id;
- (id) bark { return _wrapped; }
@end


@class Oinker
@property wrapped: id;
- (id) oink { return _wrapped; }
@end


@class Issue10Class

- (boolean) testUnused
{
	var bob;
	var foo = [bob init];

	return YES;
}


- (boolean) runTests
{
	var foo    = [[Mooer alloc] init];
	var oinker = [[Oinker alloc] init];
	var barker = [[Barker alloc] init];

	[foo    setWrapped:oinker];
	[oinker setWrapped:barker];
	[barker setWrapped:"Hello"];

	var result = [[[foo moo] oink] bark];

    assert.equal(result, "Hello");

	[oinker setWrapped:null];

	var result2 = [[[foo moo] oink] bark];
    assert.equal(result2, null);


    return YES;
}

@end

var instance = [[Issue10Class alloc] init];
[instance runTests];
