var assert = require("assert");

var sA_loadCount       = 0;
var sA_initializeCount = 0;
var sB_loadCount       = 0;
var sB_initializeCount = 0;
var sC_loadCount       = 0;
var sC_initializeCount = 0;
var sX_loadCount       = 0;
var sX_initializeCount = 0;

var sLoadOrder = [ ];
var sInitOrder = [ ];

assert.equal(sA_loadCount,       0);
assert.equal(sA_initializeCount, 0);
assert.equal(sB_loadCount,       0);
assert.equal(sB_initializeCount, 0);
assert.equal(sC_loadCount,       0);
assert.equal(sC_initializeCount, 0);
assert.equal(sX_loadCount,       0);
assert.equal(sX_initializeCount, 0);

//
//  A
//  +----+----+
//  B    C    X
//       |
//       +------
//       D     D2
//       |     |
//       E     E2



@implementation AClass

+ (void) load       { sLoadOrder.push("A"); sA_loadCount++;       }
+ (void) initialize { sInitOrder.push("A"); sA_initializeCount++; }

@end



@implementation BClass : AClass

+ (void) load       { sLoadOrder.push("B"); sB_loadCount++;       }
+ (void) initialize { sInitOrder.push("B"); sB_initializeCount++; }

@end


@implementation CClass : AClass

+ (void) load       { sLoadOrder.push("C"); sC_loadCount++;       }
+ (void) initialize { sInitOrder.push("C"); sC_initializeCount++; }

@end


@implementation DClass : CClass
@end


@implementation D2Class : CClass
+ (void) initialize { sInitOrder.push("D2");}
@end

@implementation EClass : DClass
@end

@implementation E2Class : D2Class
@end

@implementation XClass : AClass
+ (void) load       { sLoadOrder.push("X"); sX_loadCount++;       }
+ (void) initialize { sInitOrder.push("X"); sX_initializeCount++; }
+ (String) foo { return "Foo"; }
@end

function runTests()
{
    oj.loadAllClasses();

    assert.equal(sA_loadCount,       1);
    assert.equal(sA_initializeCount, 0);
    assert.equal(sB_loadCount,       1);
    assert.equal(sB_initializeCount, 0);
    assert.equal(sC_loadCount,       1);
    assert.equal(sC_initializeCount, 0);

    assert.deepEqual(sLoadOrder, [ "A", "B", "C", "X" ]);

    var instance = [[BClass alloc] init];
    assert.equal(sA_loadCount,       1);
    assert.equal(sA_initializeCount, 1);
    assert.equal(sB_loadCount,       1);
    assert.equal(sB_initializeCount, 1);
    assert.equal(sC_loadCount,       1);
    assert.equal(sC_initializeCount, 0);

    assert.deepEqual(sInitOrder, [ "A", "B" ]);

    // This should trigger OtherSubclass's +initialize
    var instance2 = [[EClass alloc] init];
    assert.equal(sA_loadCount,       1);
    assert.equal(sA_initializeCount, 1);
    assert.equal(sB_loadCount,       1);
    assert.equal(sB_initializeCount, 1);
    assert.equal(sC_loadCount,       1);
    assert.equal(sC_initializeCount, 3);  // 3 instead of 1, as D and E both inherit C's +initialize

    assert.deepEqual(sInitOrder, [ "A", "B", "C", "C", "C" ]);

    var instance3 = [[E2Class alloc] init];
    assert.equal(sA_loadCount,       1);
    assert.equal(sA_initializeCount, 1);
    assert.equal(sB_loadCount,       1);
    assert.equal(sB_initializeCount, 1);
    assert.equal(sC_loadCount,       1);
    assert.equal(sC_initializeCount, 3);

    assert.deepEqual(sInitOrder, [ "A", "B", "C", "C", "C", "D2", "D2" ]);

    // Initialize only gets called once, so all these should still be 1
    var anotherA = [[AClass alloc] init];
    var anotherB = [[BClass alloc] init];
    var anotherC = [[CClass alloc] init];
    var anotherD = [[DClass alloc] init];
    var anotherE = [[EClass alloc] init];

    assert.equal(sA_loadCount,       1);
    assert.equal(sA_initializeCount, 1);
    assert.equal(sB_loadCount,       1);
    assert.equal(sB_initializeCount, 1);
    assert.equal(sC_loadCount,       1);
    assert.equal(sC_initializeCount, 3);

    assert.equal(sX_initializeCount, 0);
    assert.equal([XClass foo], "Foo");
    assert.equal(sX_initializeCount, 1);

    assert.deepEqual(sInitOrder, [ "A", "B", "C", "C", "C", "D2", "D2", "X" ]);

    return true;
}


runTests();
