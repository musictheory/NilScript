//@opts = { }

@class IvarAndPropertiesClass

@property property1_shouldBeNull: id;
@property property2_shouldBeZero: Number;
@property property3_shouldBeNull: String;
@property property4_shouldBeNull: id;
@property property5_shouldBeFalse: BOOL;
@property property6_shouldBeFalse: Boolean;
@property property7_shouldBeZero: Number;
@property propertyWithoutSemicolon: Boolean
@property propertyWithoutSemicolon2: Boolean

@property (getter=propertyWithGetter) propertyWithGetterRaw: Boolean

@property synthesizeTest: Number;

@property (change=_updateChangeTest2) changeTest: Number;
@property (private) changeTest2: Number;


@property withoutSemicolon: Number
@property withoutSemicolon2: Number

- (BOOL) runTests
{
    assert.strictEqual(_property1_shouldBeNull,  nil,   "_property1_shouldBeNull is not null");
    assert.strictEqual(_property2_shouldBeZero,  0,     "_property2_shouldBeZero is not 0"  );
    assert.strictEqual(_property3_shouldBeNull,  nil,   "_property3_shouldBeNull is not null");
    assert.strictEqual(_property4_shouldBeNull,  nil,   "_property4_shouldBeNull is not null");
    assert.strictEqual(_property5_shouldBeFalse, false, "_property5_shouldBeFalse is not false");
    assert.strictEqual(_property6_shouldBeFalse, false, "_property6_shouldBeFalse is not false");
    assert.strictEqual(_property7_shouldBeZero,  0,     "_property7_shouldBeZero is not 0");

    assert.strictEqual(_propertyWithoutSemicolon,  NO);
    assert.strictEqual(_propertyWithoutSemicolon2, NO);

    [self setSynthesizeTest:40];
    assert.strictEqual([self synthesizeTest], 40);
    assert.strictEqual(_synthesizeTest,       40);

    [self setChangeTest:20];
    assert.strictEqual(_changeTest2, 20 * 20, "setChangeTest: did not call observer");

    return YES;
}


- (void) _updateChangeTest2
{
    _changeTest2 = _changeTest * 20;
}


@end

var instance = [[IvarAndPropertiesClass alloc] init];
[instance runTests];

