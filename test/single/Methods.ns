
@protocol ExampleProtocol
@required
+ (boolean) classMethodDefinedInProtocol;
- (void) instanceMethodDefinedInProtocol;

@optional
+ (boolean) classMethodDefinedInProtocolWithString:(string)s;
- (void) instanceMethodDefinedInProtocolWithString:(string)s;

@end


@class MultilineMethodClass

+ (boolean) classMethod { return YES }

// Test JavaScript reserved keywords as method names
- (boolean) break      { return YES; }
- (boolean) case       { return YES; }
- (boolean) catch      { return YES; }
- (boolean) continue   { return YES; }
- (boolean) debugger   { return YES; }
- (boolean) default    { return YES; }
- (boolean) delete     { return YES; }
- (boolean) do         { return YES; }
- (boolean) else       { return YES; }
- (boolean) finally    { return YES; }
- (boolean) for        { return YES; }
- (boolean) function   { return YES; }
- (boolean) if         { return YES; }
// in and instanceof do not currently work due to being special cases in binaryPrecedence()
// - (boolean) in         { return YES; }
// - (boolean) instanceof { return YES; }
- (boolean) new        { return YES; }
- (boolean) return     { return YES; }
- (boolean) switch     { return YES; }
- (boolean) this       { return YES; }
- (boolean) throw      { return YES; }
- (boolean) try        { return YES; }
- (boolean) typeof     { return YES; }
- (boolean) var        { return YES; }
- (boolean) void       { return YES; }
- (boolean) while      { return YES; }
- (boolean) with       { return YES; }

- (number) three { return 3; }
- (number) five  { return 5; }
- (number) add:(number)a with:(number)b { return a + b }

- (boolean) doMultilineMethodWithArg: (number) arg0
                              arg: (number) arg1
                              arg: (number) arg2
{
    return YES;
}

- (boolean) doMultilineMethodWithArg: (number) arg0
                              arg: (number) arg2
{
    return YES;
}

- (boolean) doSinglelineMethodWithArg:(number)arg0 arg:(number)arg1 arg:(number)arg2
{
    return YES;
}


- (boolean) compactMethod  { return YES; }
- (boolean) compactMethod2 { return YES; }
- (boolean) compactMethod3 { return YES; }

- (boolean) checkClass:(Class)cls
{
    return YES;
}

- bare: moo
{

}

- (boolean) runTests
{
    var result = true;

    result = result && [self doMultilineMethodWithArg: 0
                                                  arg: 1
                                                  arg: 2];

    result = result && [self doSinglelineMethodWithArg:0 arg:1 arg:2];

    result = result && [self compactMethod];
    result = result && [self compactMethod2];
    result = result && [self compactMethod3];
    result = result && [self break];
    result = result && [self case];
    result = result && [self catch];
    result = result && [self continue];
    result = result && [self debugger];
    result = result && [self default];
    result = result && [self delete];
    result = result && [self do];
    result = result && [self else];
    result = result && [self finally];
    result = result && [self for];
    result = result && [self function];
    result = result && [self if];
//  result = result && [self in];
//  result = result && [self instanceof];
    result = result && [self new];
    result = result && [self return];
    result = result && [self switch];
    result = result && [self this];
    result = result && [self throw];
    result = result && [self try];
    result = result && [self typeof];
    result = result && [self var];
    result = result && [self void];
    result = result && [self while];
    result = result && [self with];
    result = result && [MultilineMethodClass classMethod];

    // Check nested
    assert.equal(8, [self add:[self five] with:[self three]]);


    assert.equal(30, [self add:(5 + 5) with:(10 + 10)]);

    assert.equal(30, [self add:
        (5 + 5) with:
        (10 + 10)]);

    assert.equal(30, [self add
        :
        (5 + 5) with:
        (10 + 10)]);

    assert.equal(30, [self add:(5+5)with:(10 + 10)]);

    return result;
}

@end


var instance = [[MultilineMethodClass alloc] init];
[instance runTests]
