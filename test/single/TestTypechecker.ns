//@opts = { "output-language": "none", "typescript-lib": "es2015", "check-types": true }

@class Singleton
+ (instancetype) sharedInstance { return null; }
- (void) doSomething { }
@end

@class Foo
- (boolean) isFoo { return true; }
@end

@class Foo2 : Foo
- (string) aString { return "foo"; }
@end

@class Bar
- (id) initWithString:(string)string { return [self init]; }
- (boolean) isBar { return true; }
@end


@class TestReturnTypes

// TypeScript reports constants as their own type, so use functions here to get number/string
//
- (boolean) returnsNumberInsteadOfBoolean { return Math.round(3.14);            }  //@typecheck 2322,number,boolean
- (Foo) returnsStringInsteadOfFoo   { return [ "b", "a", "r" ].join(","); }  //@typecheck 2322,string,Foo
- (Foo) returnsNumberInsteadOfFoo   { return Math.round(3.14);            }  //@typecheck 2322,number,Foo

- (Singleton) returnsSingleton  { return null;                          }
- (Singleton) returnsSingleton2 { return [[Singleton alloc] init];      }
- (Singleton) returnsSingleton3 { return [Singleton sharedInstance];    }

- (Class) returnsClass { return [Singleton class]; }

- (Foo) returnsBarInsteadOfFoo    { return [[Bar alloc] init];                        }  //@typecheck 2322,Bar,Foo
- (Foo) returnsBarInsteadOfFoo2   { return [[[Bar class] alloc] init];                }  //@typecheck 2322,Bar,Foo
- (Foo) returnsBarInsteadOfFoo3   { return [[[[[Bar alloc] init] class] alloc] init]; }  //@typecheck 2322,Bar,Foo
- (Foo) returnsBarInsteadOfFoo4   { return [[Bar alloc] initWithString:""];           }  //@typecheck 2322,Bar,Foo

- (Object<Foo>) returnsFooMap {
    var a = [ ];
    return a;       //@typecheck 2322,Array,Object<Foo>
}



- (Map<number, number>) returnsNumberMap {
    var map = new Map();

    map.set(4, 4);

    return map;
}

- (Promise<string>) returnsStringPromise {
    return new Promise(function(resolve, reject) {
        resolve("foo");
    });
}

@end


@class TestMethodCalls

- (void) doSomethingWithFoo:(Foo)foo
{
    if ([foo isKindOfClass:[Foo2 class]]) {
        [self doSomethingWithString:[@cast(Foo2, foo) aString]];
    }
}

- (void) doSomethingWithBar:(Bar)bar { }
- (void) doSomethingWithClass:(Class)cls { }
- (void) doSomethingWithString:(string)aString { }

- (void) test
{
    var foo  = [[Foo alloc] init];
    var foo2 = [[Foo2 alloc] init];
    var bar  = [[Bar alloc] init];

    [self doSomethingWithClass:[Foo class]];
    [self doSomethingWithFoo: [[Foo alloc] init] ];
    [self doSomethingWithBar: [[Bar alloc] init] ];
    [self doSomethingWithFoo: foo ];
    [self doSomethingWithBar: bar ];

    [self doSomethingWithBar: [[Foo alloc] init] ]; //@typecheck 2345,Foo,Bar
    [self doSomethingWithFoo: [[Bar alloc] init] ]; //@typecheck 2345,Bar,Foo
    [self doSomethingWithBar: foo                ]; //@typecheck 2345,Foo,Bar
    [self doSomethingWithFoo: bar                ]; //@typecheck 2345,Bar,Foo
}

@end


@class TestIssue96
+ (void) foo:(id)x { }
+ (void) classMethod { [self foo:self]; }
- (void) instanceMethod { [[self class] foo:self]; }
@end


(function() {
@global function TakesNumber(x : number) : void { }
@global function TakesId(x : id) : void { }
@global GlobalString : string = "";
}());

TakesNumber(GlobalString); //@typecheck 2345,string,number

true;
